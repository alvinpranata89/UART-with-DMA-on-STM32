
[10]_UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080010dc  080010dc  000020dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001144  08001144  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001144  08001144  00002144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800114c  0800114c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800114c  0800114c  0000214c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001150  08001150  00002150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001154  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000050  080011a4  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080011a4  00003238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bd6  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d0  00000000  00000000  00003c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  00004028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000092  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000124a  00000000  00000000  00004192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014e1  00000000  00000000  000053dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000538c9  00000000  00000000  000068bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005a186  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000750  00000000  00000000  0005a1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0005a91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080010c4 	.word	0x080010c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	080010c4 	.word	0x080010c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:

extern char uart_data_buffer[UART_DATA_BUFF_SIZE];
char msg_buff[120] ={'\0'};

int main(void)
{
 8000290:	b598      	push	{r3, r4, r7, lr}
 8000292:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000294:	f000 f89a 	bl	80003cc <uart2_rxtx_init>
	dma1_init();
 8000298:	f000 f916 	bl	80004c8 <dma1_init>
	dma1_stream5_uart_rx_config();
 800029c:	f000 f924 	bl	80004e8 <dma1_stream5_uart_rx_config>
	dma1_stream5_uart_rx_start();
 80002a0:	f000 f9d2 	bl	8000648 <dma1_stream5_uart_rx_start>
	sprintf(msg_buff,"Initialization complete..\n\r");
 80002a4:	4919      	ldr	r1, [pc, #100]	@ (800030c <main+0x7c>)
 80002a6:	481a      	ldr	r0, [pc, #104]	@ (8000310 <main+0x80>)
 80002a8:	f000 fa74 	bl	8000794 <siprintf>
	dma1_stream6_uart_tx_config((uint32_t)msg_buff,strlen(msg_buff));
 80002ac:	4c18      	ldr	r4, [pc, #96]	@ (8000310 <main+0x80>)
 80002ae:	4818      	ldr	r0, [pc, #96]	@ (8000310 <main+0x80>)
 80002b0:	f7ff ff96 	bl	80001e0 <strlen>
 80002b4:	4603      	mov	r3, r0
 80002b6:	4619      	mov	r1, r3
 80002b8:	4620      	mov	r0, r4
 80002ba:	f000 f96f 	bl	800059c <dma1_stream6_uart_tx_config>
	dma1_stream6_uart_tx_start();
 80002be:	f000 f9d3 	bl	8000668 <dma1_stream6_uart_tx_start>

    while(!dma_tx_cmplt){}
 80002c2:	bf00      	nop
 80002c4:	4b13      	ldr	r3, [pc, #76]	@ (8000314 <main+0x84>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0fb      	beq.n	80002c4 <main+0x34>

	while(1)
	{
		if(dma_rx_cmplt)
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <main+0x88>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0fb      	beq.n	80002cc <main+0x3c>
		{
			sprintf(msg_buff, "Message received : %s \r\n",uart_data_buffer);
 80002d4:	4a11      	ldr	r2, [pc, #68]	@ (800031c <main+0x8c>)
 80002d6:	4912      	ldr	r1, [pc, #72]	@ (8000320 <main+0x90>)
 80002d8:	480d      	ldr	r0, [pc, #52]	@ (8000310 <main+0x80>)
 80002da:	f000 fa5b 	bl	8000794 <siprintf>
			dma_rx_cmplt = 0;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <main+0x88>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
			dma_tx_cmplt = 0;
 80002e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000314 <main+0x84>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
			dma1_stream6_uart_tx_config((uint32_t)msg_buff,strlen(msg_buff));
 80002ea:	4c09      	ldr	r4, [pc, #36]	@ (8000310 <main+0x80>)
 80002ec:	4808      	ldr	r0, [pc, #32]	@ (8000310 <main+0x80>)
 80002ee:	f7ff ff77 	bl	80001e0 <strlen>
 80002f2:	4603      	mov	r3, r0
 80002f4:	4619      	mov	r1, r3
 80002f6:	4620      	mov	r0, r4
 80002f8:	f000 f950 	bl	800059c <dma1_stream6_uart_tx_config>
			dma1_stream6_uart_tx_start();
 80002fc:	f000 f9b4 	bl	8000668 <dma1_stream6_uart_tx_start>
		    while(!dma_tx_cmplt){}
 8000300:	bf00      	nop
 8000302:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <main+0x84>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0fb      	beq.n	8000302 <main+0x72>
		if(dma_rx_cmplt)
 800030a:	e7df      	b.n	80002cc <main+0x3c>
 800030c:	080010dc 	.word	0x080010dc
 8000310:	2000006c 	.word	0x2000006c
 8000314:	200000ee 	.word	0x200000ee
 8000318:	200000ed 	.word	0x200000ed
 800031c:	200000e8 	.word	0x200000e8
 8000320:	080010f8 	.word	0x080010f8

08000324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800032c:	4a14      	ldr	r2, [pc, #80]	@ (8000380 <_sbrk+0x5c>)
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <_sbrk+0x60>)
 8000330:	1ad3      	subs	r3, r2, r3
 8000332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000338:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <_sbrk+0x64>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d102      	bne.n	8000346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <_sbrk+0x64>)
 8000342:	4a12      	ldr	r2, [pc, #72]	@ (800038c <_sbrk+0x68>)
 8000344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <_sbrk+0x64>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	429a      	cmp	r2, r3
 8000352:	d207      	bcs.n	8000364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000354:	f000 fa40 	bl	80007d8 <__errno>
 8000358:	4603      	mov	r3, r0
 800035a:	220c      	movs	r2, #12
 800035c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	e009      	b.n	8000378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000364:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <_sbrk+0x64>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800036a:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <_sbrk+0x64>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <_sbrk+0x64>)
 8000374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000376:	68fb      	ldr	r3, [r7, #12]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3718      	adds	r7, #24
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20018000 	.word	0x20018000
 8000384:	00000400 	.word	0x00000400
 8000388:	200000e4 	.word	0x200000e4
 800038c:	20000238 	.word	0x20000238

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4907      	ldr	r1, [pc, #28]	@ (80003c8 <__NVIC_EnableIRQ+0x38>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e100 	.word	0xe000e100

080003cc <uart2_rxtx_init>:
uint8_t dma_tx_cmplt;

//uint8_t g_uart_cmplt;

void uart2_rxtx_init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	//--------GPIO PIN Config----------------//
	//Enable clock access to GPIOA
		RCC->AHB1ENR |= GPIOAEN;
 80003d0:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <uart2_rxtx_init+0xec>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d4:	4a38      	ldr	r2, [pc, #224]	@ (80004b8 <uart2_rxtx_init+0xec>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PA2 mode to alternate function mode
	    GPIOA->MODER &= ~(1U<<4);
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <uart2_rxtx_init+0xf0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a36      	ldr	r2, [pc, #216]	@ (80004bc <uart2_rxtx_init+0xf0>)
 80003e2:	f023 0310 	bic.w	r3, r3, #16
 80003e6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=	 (1U<<5);
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <uart2_rxtx_init+0xf0>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a33      	ldr	r2, [pc, #204]	@ (80004bc <uart2_rxtx_init+0xf0>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6013      	str	r3, [r2, #0]

	//Set PA3 to AF mode
		GPIOA->MODER &= ~(1U<<6);
 80003f4:	4b31      	ldr	r3, [pc, #196]	@ (80004bc <uart2_rxtx_init+0xf0>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a30      	ldr	r2, [pc, #192]	@ (80004bc <uart2_rxtx_init+0xf0>)
 80003fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003fe:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |=	 (1U<<7);
 8000400:	4b2e      	ldr	r3, [pc, #184]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a2d      	ldr	r2, [pc, #180]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800040a:	6013      	str	r3, [r2, #0]

	//Set PA2 AF mode to AF7
		GPIOA->AFR[0] |= (1U<<8);
 800040c:	4b2b      	ldr	r3, [pc, #172]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800040e:	6a1b      	ldr	r3, [r3, #32]
 8000410:	4a2a      	ldr	r2, [pc, #168]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000416:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 8000418:	4b28      	ldr	r3, [pc, #160]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800041a:	6a1b      	ldr	r3, [r3, #32]
 800041c:	4a27      	ldr	r2, [pc, #156]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800041e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000422:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 8000424:	4b25      	ldr	r3, [pc, #148]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000426:	6a1b      	ldr	r3, [r3, #32]
 8000428:	4a24      	ldr	r2, [pc, #144]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800042a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800042e:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<11);
 8000430:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000432:	6a1b      	ldr	r3, [r3, #32]
 8000434:	4a21      	ldr	r2, [pc, #132]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800043a:	6213      	str	r3, [r2, #32]

	//Set PA3 AF mode to AF7
		GPIOA->AFR[0] |= (1U<<12);
 800043c:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a1e      	ldr	r2, [pc, #120]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000442:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000446:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<13);
 8000448:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800044a:	6a1b      	ldr	r3, [r3, #32]
 800044c:	4a1b      	ldr	r2, [pc, #108]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800044e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000452:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<14);
 8000454:	4b19      	ldr	r3, [pc, #100]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000456:	6a1b      	ldr	r3, [r3, #32]
 8000458:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <uart2_rxtx_init+0xf0>)
 800045a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800045e:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(1U<<15);
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	4a15      	ldr	r2, [pc, #84]	@ (80004bc <uart2_rxtx_init+0xf0>)
 8000466:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800046a:	6213      	str	r3, [r2, #32]

	//--------UART Module Config----------------//
	//Enable clock access to UART2
		RCC->APB1ENR |= UART2EN;
 800046c:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <uart2_rxtx_init+0xec>)
 800046e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000470:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <uart2_rxtx_init+0xec>)
 8000472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000476:	6413      	str	r3, [r2, #64]	@ 0x40

	//set baudrate
		uart_set_baudrate(CLK,UART_BAUDRATE);
 8000478:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800047c:	4810      	ldr	r0, [pc, #64]	@ (80004c0 <uart2_rxtx_init+0xf4>)
 800047e:	f000 f917 	bl	80006b0 <uart_set_baudrate>

	//enable UART to use DMA on TX and RX
		USART2->CR3 = CR3_DMAT | CR3_DMAR;
 8000482:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 8000484:	22c0      	movs	r2, #192	@ 0xc0
 8000486:	615a      	str	r2, [r3, #20]

	//set transfer direction
		USART2->CR1 = CR1_TE | CR1_RE;
 8000488:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 800048a:	220c      	movs	r2, #12
 800048c:	60da      	str	r2, [r3, #12]

	//clear Transfer Complete Flag
		USART2->SR &=~SR_TC;
 800048e:	4b0d      	ldr	r3, [pc, #52]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a0c      	ldr	r2, [pc, #48]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 8000494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000498:	6013      	str	r3, [r2, #0]

	//Enable Transfer Complete Interrupt
		USART2->CR1 |= CR1_TCIE;
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4a09      	ldr	r2, [pc, #36]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 80004a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004a4:	60d3      	str	r3, [r2, #12]

	//Enable UART module
		USART2->CR1 |= CR1_UE;
 80004a6:	4b07      	ldr	r3, [pc, #28]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	4a06      	ldr	r2, [pc, #24]	@ (80004c4 <uart2_rxtx_init+0xf8>)
 80004ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004b0:	60d3      	str	r3, [r2, #12]
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40020000 	.word	0x40020000
 80004c0:	00f42400 	.word	0x00f42400
 80004c4:	40004400 	.word	0x40004400

080004c8 <dma1_init>:


void dma1_init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	//enable clock access to DMA1
		RCC->AHB1ENR |= DMA1EN;
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <dma1_init+0x1c>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <dma1_init+0x1c>)
 80004d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004d6:	6313      	str	r3, [r2, #48]	@ 0x30
	//enable DMA stream6 interrupt in NVIC
		NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80004d8:	2011      	movs	r0, #17
 80004da:	f7ff ff59 	bl	8000390 <__NVIC_EnableIRQ>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40023800 	.word	0x40023800

080004e8 <dma1_stream5_uart_rx_config>:

void dma1_stream5_uart_rx_config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	//Disable DMA stream
		DMA1_Stream5->CR &=~DMA_SCR_EN;
 80004ec:	4b27      	ldr	r3, [pc, #156]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a26      	ldr	r2, [pc, #152]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 80004f2:	f023 0301 	bic.w	r3, r3, #1
 80004f6:	6013      	str	r3, [r2, #0]
	//wait until DMA is disabled
		while((DMA1_Stream5->CR & DMA_SCR_EN)){}
 80004f8:	bf00      	nop
 80004fa:	4b24      	ldr	r3, [pc, #144]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1f9      	bne.n	80004fa <dma1_stream5_uart_rx_config+0x12>

	//clear interrupt flag for stream 5
		DMA1->HIFCR = HIFCR_CDMEIF5 |HIFCR_CTEIF5|HIFCR_CTCIF5;
 8000506:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <dma1_stream5_uart_rx_config+0xa8>)
 8000508:	f44f 6230 	mov.w	r2, #2816	@ 0xb00
 800050c:	60da      	str	r2, [r3, #12]

	//set periph address
		DMA1_Stream5->PAR = (uint32_t)(&USART2->DR);
 800050e:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000510:	4a20      	ldr	r2, [pc, #128]	@ (8000594 <dma1_stream5_uart_rx_config+0xac>)
 8000512:	609a      	str	r2, [r3, #8]

	//set mem address
		DMA1_Stream5->M0AR = (uint32_t)(uart_data_buffer);
 8000514:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000516:	4a20      	ldr	r2, [pc, #128]	@ (8000598 <dma1_stream5_uart_rx_config+0xb0>)
 8000518:	60da      	str	r2, [r3, #12]

	//set number of transfer
		DMA1_Stream5->NDTR = (uint16_t)UART_DATA_BUFF_SIZE;
 800051a:	4b1c      	ldr	r3, [pc, #112]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800051c:	2205      	movs	r2, #5
 800051e:	605a      	str	r2, [r3, #4]

	//select channel 4
		DMA1_Stream5->CR &=~(1U<<25);
 8000520:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a19      	ldr	r2, [pc, #100]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000526:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800052a:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &=~(1U<<26);
 800052c:	4b17      	ldr	r3, [pc, #92]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a16      	ldr	r2, [pc, #88]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000536:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR |= (1U<<27);
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a13      	ldr	r2, [pc, #76]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800053e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000542:	6013      	str	r3, [r2, #0]

	//enable memory address increment
		DMA1_Stream5->CR |=DMA_SCR_MINC;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a10      	ldr	r2, [pc, #64]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800054a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800054e:	6013      	str	r3, [r2, #0]

	//enable circular mode
		DMA1_Stream5->CR |=DMA_SCR_CIRC;
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0d      	ldr	r2, [pc, #52]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800055a:	6013      	str	r3, [r2, #0]

	//enable transfer complete interrupt
		DMA1_Stream5->CR |= DMA_SCR_TCIE;
 800055c:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]

	//set transfer direction (periph to mem)
		DMA1_Stream5->CR &=~(1U<<6);
 8000568:	4b08      	ldr	r3, [pc, #32]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800056e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000572:	6013      	str	r3, [r2, #0]
		DMA1_Stream5->CR &=~(1U<<7);
 8000574:	4b05      	ldr	r3, [pc, #20]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <dma1_stream5_uart_rx_config+0xa4>)
 800057a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800057e:	6013      	str	r3, [r2, #0]



	//enable DMA stream5 interrupt in NVIC
		NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000580:	2010      	movs	r0, #16
 8000582:	f7ff ff05 	bl	8000390 <__NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40026088 	.word	0x40026088
 8000590:	40026000 	.word	0x40026000
 8000594:	40004404 	.word	0x40004404
 8000598:	200000e8 	.word	0x200000e8

0800059c <dma1_stream6_uart_tx_config>:

void dma1_stream6_uart_tx_config(uint32_t msg_to_snd, uint32_t msg_len)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
		//Disable DMA stream
			DMA1_Stream6->CR &=~DMA_SCR_EN;
 80005a6:	4b25      	ldr	r3, [pc, #148]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a24      	ldr	r2, [pc, #144]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005ac:	f023 0301 	bic.w	r3, r3, #1
 80005b0:	6013      	str	r3, [r2, #0]

		//wait until DMA is disabled
			while((DMA1_Stream6->CR & DMA_SCR_EN)){}
 80005b2:	bf00      	nop
 80005b4:	4b21      	ldr	r3, [pc, #132]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1f9      	bne.n	80005b4 <dma1_stream6_uart_tx_config+0x18>

		//clear interrupt flag for stream 6
			DMA1->HIFCR = HIFCR_CDMEIF6 |HIFCR_CTEIF6|HIFCR_CTCIF6;
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <dma1_stream6_uart_tx_config+0xa4>)
 80005c2:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80005c6:	60da      	str	r2, [r3, #12]

		//set periph address
			DMA1_Stream6->PAR = (uint32_t)(&(USART2->DR));
 80005c8:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000644 <dma1_stream6_uart_tx_config+0xa8>)
 80005cc:	609a      	str	r2, [r3, #8]

		//set mem address
			DMA1_Stream6->M0AR = msg_to_snd;
 80005ce:	4a1b      	ldr	r2, [pc, #108]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60d3      	str	r3, [r2, #12]

		//set number of transfer
			DMA1_Stream6->NDTR = msg_len;
 80005d4:	4a19      	ldr	r2, [pc, #100]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	6053      	str	r3, [r2, #4]

		//select channel 4
			DMA1_Stream6->CR &= ~(1u<<25);
 80005da:	4b18      	ldr	r3, [pc, #96]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80005e4:	6013      	str	r3, [r2, #0]
			DMA1_Stream6->CR &= ~(1u<<26);
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80005f0:	6013      	str	r3, [r2, #0]
			DMA1_Stream6->CR |= (1u<<27);
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a11      	ldr	r2, [pc, #68]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 80005f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80005fc:	6013      	str	r3, [r2, #0]

		//enable memory address increment
			DMA1_Stream6->CR |=DMA_SCR_MINC;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 8000604:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000608:	6013      	str	r3, [r2, #0]

		//set transfer direction
			DMA1_Stream6->CR |=(1U<<6);
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 8000610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000614:	6013      	str	r3, [r2, #0]
			DMA1_Stream6->CR &=~(1U<<7);
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a08      	ldr	r2, [pc, #32]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 800061c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000620:	6013      	str	r3, [r2, #0]

		//enable transfer complete interrupt
			DMA1_Stream6->CR |= DMA_SCR_TCIE;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a05      	ldr	r2, [pc, #20]	@ (800063c <dma1_stream6_uart_tx_config+0xa0>)
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6013      	str	r3, [r2, #0]


}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	400260a0 	.word	0x400260a0
 8000640:	40026000 	.word	0x40026000
 8000644:	40004404 	.word	0x40004404

08000648 <dma1_stream5_uart_rx_start>:

void dma1_stream5_uart_rx_start (void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	//enable dma stream
	DMA1_Stream5->CR |= DMA_SCR_EN;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <dma1_stream5_uart_rx_start+0x1c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <dma1_stream5_uart_rx_start+0x1c>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40026088 	.word	0x40026088

08000668 <dma1_stream6_uart_tx_start>:

void dma1_stream6_uart_tx_start (void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	//enable dma stream
	DMA1_Stream6->CR |= DMA_SCR_EN;
 800066c:	4b05      	ldr	r3, [pc, #20]	@ (8000684 <dma1_stream6_uart_tx_start+0x1c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <dma1_stream6_uart_tx_start+0x1c>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	400260a0 	.word	0x400260a0

08000688 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	return ((periph_clk +( baudrate/2U ))/baudrate);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	085a      	lsrs	r2, r3, #1
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	441a      	add	r2, r3
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	b29b      	uxth	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <uart_set_baudrate>:


static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	USART2->BRR  = compute_uart_bd(periph_clk,baudrate);
 80006ba:	6839      	ldr	r1, [r7, #0]
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ffe3 	bl	8000688 <compute_uart_bd>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b03      	ldr	r3, [pc, #12]	@ (80006d4 <uart_set_baudrate+0x24>)
 80006c8:	609a      	str	r2, [r3, #8]
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40004400 	.word	0x40004400

080006d8 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF6)
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <DMA1_Stream6_IRQHandler+0x2c>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d008      	beq.n	80006fa <DMA1_Stream6_IRQHandler+0x22>
	{
		//do_ssomething
		dma_tx_cmplt = 1;
 80006e8:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <DMA1_Stream6_IRQHandler+0x30>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
		/*Clear the flag*/
		DMA1->HIFCR |= HIFCR_CTCIF6;
 80006ee:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <DMA1_Stream6_IRQHandler+0x2c>)
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <DMA1_Stream6_IRQHandler+0x2c>)
 80006f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006f8:	60d3      	str	r3, [r2, #12]
	}
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40026000 	.word	0x40026000
 8000708:	200000ee 	.word	0x200000ee

0800070c <DMA1_Stream5_IRQHandler>:


void DMA1_Stream5_IRQHandler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	if((DMA1->HISR) & HIFSR_TCIF5)
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <DMA1_Stream5_IRQHandler+0x2c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000718:	2b00      	cmp	r3, #0
 800071a:	d008      	beq.n	800072e <DMA1_Stream5_IRQHandler+0x22>
	{

		dma_rx_cmplt = 1;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <DMA1_Stream5_IRQHandler+0x30>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]

		//do_ssomething


		/*Clear the flag*/
		DMA1->HIFCR |= HIFCR_CTCIF5;
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <DMA1_Stream5_IRQHandler+0x2c>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	4a04      	ldr	r2, [pc, #16]	@ (8000738 <DMA1_Stream5_IRQHandler+0x2c>)
 8000728:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800072c:	60d3      	str	r3, [r2, #12]
	}
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40026000 	.word	0x40026000
 800073c:	200000ed 	.word	0x200000ed

08000740 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000742:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000744:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000748:	480c      	ldr	r0, [pc, #48]	@ (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 800074a:	490d      	ldr	r1, [pc, #52]	@ (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000750:	e002      	b.n	8000758 <LoopCopyDataInit>

08000752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000756:	3304      	adds	r3, #4

08000758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800075c:	d3f9      	bcc.n	8000752 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000760:	4c0a      	ldr	r4, [pc, #40]	@ (800078c <LoopForever+0x16>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000764:	e001      	b.n	800076a <LoopFillZerobss>

08000766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000768:	3204      	adds	r2, #4

0800076a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800076c:	d3fb      	bcc.n	8000766 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800076e:	f000 f839 	bl	80007e4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000772:	f7ff fd8d 	bl	8000290 <main>

08000776 <LoopForever>:

LoopForever:
  b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   r0, =_estack
 8000778:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000784:	08001154 	.word	0x08001154
  ldr r2, =_sbss
 8000788:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800078c:	20000238 	.word	0x20000238

08000790 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC_IRQHandler>
	...

08000794 <siprintf>:
 8000794:	b40e      	push	{r1, r2, r3}
 8000796:	b510      	push	{r4, lr}
 8000798:	b09d      	sub	sp, #116	@ 0x74
 800079a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800079c:	9002      	str	r0, [sp, #8]
 800079e:	9006      	str	r0, [sp, #24]
 80007a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80007a4:	480a      	ldr	r0, [pc, #40]	@ (80007d0 <siprintf+0x3c>)
 80007a6:	9107      	str	r1, [sp, #28]
 80007a8:	9104      	str	r1, [sp, #16]
 80007aa:	490a      	ldr	r1, [pc, #40]	@ (80007d4 <siprintf+0x40>)
 80007ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80007b0:	9105      	str	r1, [sp, #20]
 80007b2:	2400      	movs	r4, #0
 80007b4:	a902      	add	r1, sp, #8
 80007b6:	6800      	ldr	r0, [r0, #0]
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80007bc:	f000 f98c 	bl	8000ad8 <_svfiprintf_r>
 80007c0:	9b02      	ldr	r3, [sp, #8]
 80007c2:	701c      	strb	r4, [r3, #0]
 80007c4:	b01d      	add	sp, #116	@ 0x74
 80007c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ca:	b003      	add	sp, #12
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000000 	.word	0x20000000
 80007d4:	ffff0208 	.word	0xffff0208

080007d8 <__errno>:
 80007d8:	4b01      	ldr	r3, [pc, #4]	@ (80007e0 <__errno+0x8>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000

080007e4 <__libc_init_array>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	4d0d      	ldr	r5, [pc, #52]	@ (800081c <__libc_init_array+0x38>)
 80007e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000820 <__libc_init_array+0x3c>)
 80007ea:	1b64      	subs	r4, r4, r5
 80007ec:	10a4      	asrs	r4, r4, #2
 80007ee:	2600      	movs	r6, #0
 80007f0:	42a6      	cmp	r6, r4
 80007f2:	d109      	bne.n	8000808 <__libc_init_array+0x24>
 80007f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000824 <__libc_init_array+0x40>)
 80007f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000828 <__libc_init_array+0x44>)
 80007f8:	f000 fc64 	bl	80010c4 <_init>
 80007fc:	1b64      	subs	r4, r4, r5
 80007fe:	10a4      	asrs	r4, r4, #2
 8000800:	2600      	movs	r6, #0
 8000802:	42a6      	cmp	r6, r4
 8000804:	d105      	bne.n	8000812 <__libc_init_array+0x2e>
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	f855 3b04 	ldr.w	r3, [r5], #4
 800080c:	4798      	blx	r3
 800080e:	3601      	adds	r6, #1
 8000810:	e7ee      	b.n	80007f0 <__libc_init_array+0xc>
 8000812:	f855 3b04 	ldr.w	r3, [r5], #4
 8000816:	4798      	blx	r3
 8000818:	3601      	adds	r6, #1
 800081a:	e7f2      	b.n	8000802 <__libc_init_array+0x1e>
 800081c:	0800114c 	.word	0x0800114c
 8000820:	0800114c 	.word	0x0800114c
 8000824:	0800114c 	.word	0x0800114c
 8000828:	08001150 	.word	0x08001150

0800082c <__retarget_lock_acquire_recursive>:
 800082c:	4770      	bx	lr

0800082e <__retarget_lock_release_recursive>:
 800082e:	4770      	bx	lr

08000830 <_free_r>:
 8000830:	b538      	push	{r3, r4, r5, lr}
 8000832:	4605      	mov	r5, r0
 8000834:	2900      	cmp	r1, #0
 8000836:	d041      	beq.n	80008bc <_free_r+0x8c>
 8000838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800083c:	1f0c      	subs	r4, r1, #4
 800083e:	2b00      	cmp	r3, #0
 8000840:	bfb8      	it	lt
 8000842:	18e4      	addlt	r4, r4, r3
 8000844:	f000 f8e0 	bl	8000a08 <__malloc_lock>
 8000848:	4a1d      	ldr	r2, [pc, #116]	@ (80008c0 <_free_r+0x90>)
 800084a:	6813      	ldr	r3, [r2, #0]
 800084c:	b933      	cbnz	r3, 800085c <_free_r+0x2c>
 800084e:	6063      	str	r3, [r4, #4]
 8000850:	6014      	str	r4, [r2, #0]
 8000852:	4628      	mov	r0, r5
 8000854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000858:	f000 b8dc 	b.w	8000a14 <__malloc_unlock>
 800085c:	42a3      	cmp	r3, r4
 800085e:	d908      	bls.n	8000872 <_free_r+0x42>
 8000860:	6820      	ldr	r0, [r4, #0]
 8000862:	1821      	adds	r1, r4, r0
 8000864:	428b      	cmp	r3, r1
 8000866:	bf01      	itttt	eq
 8000868:	6819      	ldreq	r1, [r3, #0]
 800086a:	685b      	ldreq	r3, [r3, #4]
 800086c:	1809      	addeq	r1, r1, r0
 800086e:	6021      	streq	r1, [r4, #0]
 8000870:	e7ed      	b.n	800084e <_free_r+0x1e>
 8000872:	461a      	mov	r2, r3
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	b10b      	cbz	r3, 800087c <_free_r+0x4c>
 8000878:	42a3      	cmp	r3, r4
 800087a:	d9fa      	bls.n	8000872 <_free_r+0x42>
 800087c:	6811      	ldr	r1, [r2, #0]
 800087e:	1850      	adds	r0, r2, r1
 8000880:	42a0      	cmp	r0, r4
 8000882:	d10b      	bne.n	800089c <_free_r+0x6c>
 8000884:	6820      	ldr	r0, [r4, #0]
 8000886:	4401      	add	r1, r0
 8000888:	1850      	adds	r0, r2, r1
 800088a:	4283      	cmp	r3, r0
 800088c:	6011      	str	r1, [r2, #0]
 800088e:	d1e0      	bne.n	8000852 <_free_r+0x22>
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	6053      	str	r3, [r2, #4]
 8000896:	4408      	add	r0, r1
 8000898:	6010      	str	r0, [r2, #0]
 800089a:	e7da      	b.n	8000852 <_free_r+0x22>
 800089c:	d902      	bls.n	80008a4 <_free_r+0x74>
 800089e:	230c      	movs	r3, #12
 80008a0:	602b      	str	r3, [r5, #0]
 80008a2:	e7d6      	b.n	8000852 <_free_r+0x22>
 80008a4:	6820      	ldr	r0, [r4, #0]
 80008a6:	1821      	adds	r1, r4, r0
 80008a8:	428b      	cmp	r3, r1
 80008aa:	bf04      	itt	eq
 80008ac:	6819      	ldreq	r1, [r3, #0]
 80008ae:	685b      	ldreq	r3, [r3, #4]
 80008b0:	6063      	str	r3, [r4, #4]
 80008b2:	bf04      	itt	eq
 80008b4:	1809      	addeq	r1, r1, r0
 80008b6:	6021      	streq	r1, [r4, #0]
 80008b8:	6054      	str	r4, [r2, #4]
 80008ba:	e7ca      	b.n	8000852 <_free_r+0x22>
 80008bc:	bd38      	pop	{r3, r4, r5, pc}
 80008be:	bf00      	nop
 80008c0:	20000234 	.word	0x20000234

080008c4 <sbrk_aligned>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	4e0f      	ldr	r6, [pc, #60]	@ (8000904 <sbrk_aligned+0x40>)
 80008c8:	460c      	mov	r4, r1
 80008ca:	6831      	ldr	r1, [r6, #0]
 80008cc:	4605      	mov	r5, r0
 80008ce:	b911      	cbnz	r1, 80008d6 <sbrk_aligned+0x12>
 80008d0:	f000 fba4 	bl	800101c <_sbrk_r>
 80008d4:	6030      	str	r0, [r6, #0]
 80008d6:	4621      	mov	r1, r4
 80008d8:	4628      	mov	r0, r5
 80008da:	f000 fb9f 	bl	800101c <_sbrk_r>
 80008de:	1c43      	adds	r3, r0, #1
 80008e0:	d103      	bne.n	80008ea <sbrk_aligned+0x26>
 80008e2:	f04f 34ff 	mov.w	r4, #4294967295
 80008e6:	4620      	mov	r0, r4
 80008e8:	bd70      	pop	{r4, r5, r6, pc}
 80008ea:	1cc4      	adds	r4, r0, #3
 80008ec:	f024 0403 	bic.w	r4, r4, #3
 80008f0:	42a0      	cmp	r0, r4
 80008f2:	d0f8      	beq.n	80008e6 <sbrk_aligned+0x22>
 80008f4:	1a21      	subs	r1, r4, r0
 80008f6:	4628      	mov	r0, r5
 80008f8:	f000 fb90 	bl	800101c <_sbrk_r>
 80008fc:	3001      	adds	r0, #1
 80008fe:	d1f2      	bne.n	80008e6 <sbrk_aligned+0x22>
 8000900:	e7ef      	b.n	80008e2 <sbrk_aligned+0x1e>
 8000902:	bf00      	nop
 8000904:	20000230 	.word	0x20000230

08000908 <_malloc_r>:
 8000908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800090c:	1ccd      	adds	r5, r1, #3
 800090e:	f025 0503 	bic.w	r5, r5, #3
 8000912:	3508      	adds	r5, #8
 8000914:	2d0c      	cmp	r5, #12
 8000916:	bf38      	it	cc
 8000918:	250c      	movcc	r5, #12
 800091a:	2d00      	cmp	r5, #0
 800091c:	4606      	mov	r6, r0
 800091e:	db01      	blt.n	8000924 <_malloc_r+0x1c>
 8000920:	42a9      	cmp	r1, r5
 8000922:	d904      	bls.n	800092e <_malloc_r+0x26>
 8000924:	230c      	movs	r3, #12
 8000926:	6033      	str	r3, [r6, #0]
 8000928:	2000      	movs	r0, #0
 800092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800092e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a04 <_malloc_r+0xfc>
 8000932:	f000 f869 	bl	8000a08 <__malloc_lock>
 8000936:	f8d8 3000 	ldr.w	r3, [r8]
 800093a:	461c      	mov	r4, r3
 800093c:	bb44      	cbnz	r4, 8000990 <_malloc_r+0x88>
 800093e:	4629      	mov	r1, r5
 8000940:	4630      	mov	r0, r6
 8000942:	f7ff ffbf 	bl	80008c4 <sbrk_aligned>
 8000946:	1c43      	adds	r3, r0, #1
 8000948:	4604      	mov	r4, r0
 800094a:	d158      	bne.n	80009fe <_malloc_r+0xf6>
 800094c:	f8d8 4000 	ldr.w	r4, [r8]
 8000950:	4627      	mov	r7, r4
 8000952:	2f00      	cmp	r7, #0
 8000954:	d143      	bne.n	80009de <_malloc_r+0xd6>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d04b      	beq.n	80009f2 <_malloc_r+0xea>
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	4639      	mov	r1, r7
 800095e:	4630      	mov	r0, r6
 8000960:	eb04 0903 	add.w	r9, r4, r3
 8000964:	f000 fb5a 	bl	800101c <_sbrk_r>
 8000968:	4581      	cmp	r9, r0
 800096a:	d142      	bne.n	80009f2 <_malloc_r+0xea>
 800096c:	6821      	ldr	r1, [r4, #0]
 800096e:	1a6d      	subs	r5, r5, r1
 8000970:	4629      	mov	r1, r5
 8000972:	4630      	mov	r0, r6
 8000974:	f7ff ffa6 	bl	80008c4 <sbrk_aligned>
 8000978:	3001      	adds	r0, #1
 800097a:	d03a      	beq.n	80009f2 <_malloc_r+0xea>
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	442b      	add	r3, r5
 8000980:	6023      	str	r3, [r4, #0]
 8000982:	f8d8 3000 	ldr.w	r3, [r8]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	bb62      	cbnz	r2, 80009e4 <_malloc_r+0xdc>
 800098a:	f8c8 7000 	str.w	r7, [r8]
 800098e:	e00f      	b.n	80009b0 <_malloc_r+0xa8>
 8000990:	6822      	ldr	r2, [r4, #0]
 8000992:	1b52      	subs	r2, r2, r5
 8000994:	d420      	bmi.n	80009d8 <_malloc_r+0xd0>
 8000996:	2a0b      	cmp	r2, #11
 8000998:	d917      	bls.n	80009ca <_malloc_r+0xc2>
 800099a:	1961      	adds	r1, r4, r5
 800099c:	42a3      	cmp	r3, r4
 800099e:	6025      	str	r5, [r4, #0]
 80009a0:	bf18      	it	ne
 80009a2:	6059      	strne	r1, [r3, #4]
 80009a4:	6863      	ldr	r3, [r4, #4]
 80009a6:	bf08      	it	eq
 80009a8:	f8c8 1000 	streq.w	r1, [r8]
 80009ac:	5162      	str	r2, [r4, r5]
 80009ae:	604b      	str	r3, [r1, #4]
 80009b0:	4630      	mov	r0, r6
 80009b2:	f000 f82f 	bl	8000a14 <__malloc_unlock>
 80009b6:	f104 000b 	add.w	r0, r4, #11
 80009ba:	1d23      	adds	r3, r4, #4
 80009bc:	f020 0007 	bic.w	r0, r0, #7
 80009c0:	1ac2      	subs	r2, r0, r3
 80009c2:	bf1c      	itt	ne
 80009c4:	1a1b      	subne	r3, r3, r0
 80009c6:	50a3      	strne	r3, [r4, r2]
 80009c8:	e7af      	b.n	800092a <_malloc_r+0x22>
 80009ca:	6862      	ldr	r2, [r4, #4]
 80009cc:	42a3      	cmp	r3, r4
 80009ce:	bf0c      	ite	eq
 80009d0:	f8c8 2000 	streq.w	r2, [r8]
 80009d4:	605a      	strne	r2, [r3, #4]
 80009d6:	e7eb      	b.n	80009b0 <_malloc_r+0xa8>
 80009d8:	4623      	mov	r3, r4
 80009da:	6864      	ldr	r4, [r4, #4]
 80009dc:	e7ae      	b.n	800093c <_malloc_r+0x34>
 80009de:	463c      	mov	r4, r7
 80009e0:	687f      	ldr	r7, [r7, #4]
 80009e2:	e7b6      	b.n	8000952 <_malloc_r+0x4a>
 80009e4:	461a      	mov	r2, r3
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	42a3      	cmp	r3, r4
 80009ea:	d1fb      	bne.n	80009e4 <_malloc_r+0xdc>
 80009ec:	2300      	movs	r3, #0
 80009ee:	6053      	str	r3, [r2, #4]
 80009f0:	e7de      	b.n	80009b0 <_malloc_r+0xa8>
 80009f2:	230c      	movs	r3, #12
 80009f4:	6033      	str	r3, [r6, #0]
 80009f6:	4630      	mov	r0, r6
 80009f8:	f000 f80c 	bl	8000a14 <__malloc_unlock>
 80009fc:	e794      	b.n	8000928 <_malloc_r+0x20>
 80009fe:	6005      	str	r5, [r0, #0]
 8000a00:	e7d6      	b.n	80009b0 <_malloc_r+0xa8>
 8000a02:	bf00      	nop
 8000a04:	20000234 	.word	0x20000234

08000a08 <__malloc_lock>:
 8000a08:	4801      	ldr	r0, [pc, #4]	@ (8000a10 <__malloc_lock+0x8>)
 8000a0a:	f7ff bf0f 	b.w	800082c <__retarget_lock_acquire_recursive>
 8000a0e:	bf00      	nop
 8000a10:	2000022c 	.word	0x2000022c

08000a14 <__malloc_unlock>:
 8000a14:	4801      	ldr	r0, [pc, #4]	@ (8000a1c <__malloc_unlock+0x8>)
 8000a16:	f7ff bf0a 	b.w	800082e <__retarget_lock_release_recursive>
 8000a1a:	bf00      	nop
 8000a1c:	2000022c 	.word	0x2000022c

08000a20 <__ssputs_r>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	688e      	ldr	r6, [r1, #8]
 8000a26:	461f      	mov	r7, r3
 8000a28:	42be      	cmp	r6, r7
 8000a2a:	680b      	ldr	r3, [r1, #0]
 8000a2c:	4682      	mov	sl, r0
 8000a2e:	460c      	mov	r4, r1
 8000a30:	4690      	mov	r8, r2
 8000a32:	d82d      	bhi.n	8000a90 <__ssputs_r+0x70>
 8000a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a3c:	d026      	beq.n	8000a8c <__ssputs_r+0x6c>
 8000a3e:	6965      	ldr	r5, [r4, #20]
 8000a40:	6909      	ldr	r1, [r1, #16]
 8000a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a46:	eba3 0901 	sub.w	r9, r3, r1
 8000a4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a4e:	1c7b      	adds	r3, r7, #1
 8000a50:	444b      	add	r3, r9
 8000a52:	106d      	asrs	r5, r5, #1
 8000a54:	429d      	cmp	r5, r3
 8000a56:	bf38      	it	cc
 8000a58:	461d      	movcc	r5, r3
 8000a5a:	0553      	lsls	r3, r2, #21
 8000a5c:	d527      	bpl.n	8000aae <__ssputs_r+0x8e>
 8000a5e:	4629      	mov	r1, r5
 8000a60:	f7ff ff52 	bl	8000908 <_malloc_r>
 8000a64:	4606      	mov	r6, r0
 8000a66:	b360      	cbz	r0, 8000ac2 <__ssputs_r+0xa2>
 8000a68:	6921      	ldr	r1, [r4, #16]
 8000a6a:	464a      	mov	r2, r9
 8000a6c:	f000 fae6 	bl	800103c <memcpy>
 8000a70:	89a3      	ldrh	r3, [r4, #12]
 8000a72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a7a:	81a3      	strh	r3, [r4, #12]
 8000a7c:	6126      	str	r6, [r4, #16]
 8000a7e:	6165      	str	r5, [r4, #20]
 8000a80:	444e      	add	r6, r9
 8000a82:	eba5 0509 	sub.w	r5, r5, r9
 8000a86:	6026      	str	r6, [r4, #0]
 8000a88:	60a5      	str	r5, [r4, #8]
 8000a8a:	463e      	mov	r6, r7
 8000a8c:	42be      	cmp	r6, r7
 8000a8e:	d900      	bls.n	8000a92 <__ssputs_r+0x72>
 8000a90:	463e      	mov	r6, r7
 8000a92:	6820      	ldr	r0, [r4, #0]
 8000a94:	4632      	mov	r2, r6
 8000a96:	4641      	mov	r1, r8
 8000a98:	f000 faa6 	bl	8000fe8 <memmove>
 8000a9c:	68a3      	ldr	r3, [r4, #8]
 8000a9e:	1b9b      	subs	r3, r3, r6
 8000aa0:	60a3      	str	r3, [r4, #8]
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	4433      	add	r3, r6
 8000aa6:	6023      	str	r3, [r4, #0]
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aae:	462a      	mov	r2, r5
 8000ab0:	f000 fad2 	bl	8001058 <_realloc_r>
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d1e0      	bne.n	8000a7c <__ssputs_r+0x5c>
 8000aba:	6921      	ldr	r1, [r4, #16]
 8000abc:	4650      	mov	r0, sl
 8000abe:	f7ff feb7 	bl	8000830 <_free_r>
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	f8ca 3000 	str.w	r3, [sl]
 8000ac8:	89a3      	ldrh	r3, [r4, #12]
 8000aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ace:	81a3      	strh	r3, [r4, #12]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	e7e9      	b.n	8000aaa <__ssputs_r+0x8a>
	...

08000ad8 <_svfiprintf_r>:
 8000ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000adc:	4698      	mov	r8, r3
 8000ade:	898b      	ldrh	r3, [r1, #12]
 8000ae0:	061b      	lsls	r3, r3, #24
 8000ae2:	b09d      	sub	sp, #116	@ 0x74
 8000ae4:	4607      	mov	r7, r0
 8000ae6:	460d      	mov	r5, r1
 8000ae8:	4614      	mov	r4, r2
 8000aea:	d510      	bpl.n	8000b0e <_svfiprintf_r+0x36>
 8000aec:	690b      	ldr	r3, [r1, #16]
 8000aee:	b973      	cbnz	r3, 8000b0e <_svfiprintf_r+0x36>
 8000af0:	2140      	movs	r1, #64	@ 0x40
 8000af2:	f7ff ff09 	bl	8000908 <_malloc_r>
 8000af6:	6028      	str	r0, [r5, #0]
 8000af8:	6128      	str	r0, [r5, #16]
 8000afa:	b930      	cbnz	r0, 8000b0a <_svfiprintf_r+0x32>
 8000afc:	230c      	movs	r3, #12
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	b01d      	add	sp, #116	@ 0x74
 8000b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	616b      	str	r3, [r5, #20]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b12:	2320      	movs	r3, #32
 8000b14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b1c:	2330      	movs	r3, #48	@ 0x30
 8000b1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cbc <_svfiprintf_r+0x1e4>
 8000b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b26:	f04f 0901 	mov.w	r9, #1
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b32:	b10a      	cbz	r2, 8000b38 <_svfiprintf_r+0x60>
 8000b34:	2a25      	cmp	r2, #37	@ 0x25
 8000b36:	d1f9      	bne.n	8000b2c <_svfiprintf_r+0x54>
 8000b38:	ebba 0b04 	subs.w	fp, sl, r4
 8000b3c:	d00b      	beq.n	8000b56 <_svfiprintf_r+0x7e>
 8000b3e:	465b      	mov	r3, fp
 8000b40:	4622      	mov	r2, r4
 8000b42:	4629      	mov	r1, r5
 8000b44:	4638      	mov	r0, r7
 8000b46:	f7ff ff6b 	bl	8000a20 <__ssputs_r>
 8000b4a:	3001      	adds	r0, #1
 8000b4c:	f000 80a7 	beq.w	8000c9e <_svfiprintf_r+0x1c6>
 8000b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b52:	445a      	add	r2, fp
 8000b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b56:	f89a 3000 	ldrb.w	r3, [sl]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 809f 	beq.w	8000c9e <_svfiprintf_r+0x1c6>
 8000b60:	2300      	movs	r3, #0
 8000b62:	f04f 32ff 	mov.w	r2, #4294967295
 8000b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b6a:	f10a 0a01 	add.w	sl, sl, #1
 8000b6e:	9304      	str	r3, [sp, #16]
 8000b70:	9307      	str	r3, [sp, #28]
 8000b72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b76:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b78:	4654      	mov	r4, sl
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b80:	484e      	ldr	r0, [pc, #312]	@ (8000cbc <_svfiprintf_r+0x1e4>)
 8000b82:	f7ff fb35 	bl	80001f0 <memchr>
 8000b86:	9a04      	ldr	r2, [sp, #16]
 8000b88:	b9d8      	cbnz	r0, 8000bc2 <_svfiprintf_r+0xea>
 8000b8a:	06d0      	lsls	r0, r2, #27
 8000b8c:	bf44      	itt	mi
 8000b8e:	2320      	movmi	r3, #32
 8000b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b94:	0711      	lsls	r1, r2, #28
 8000b96:	bf44      	itt	mi
 8000b98:	232b      	movmi	r3, #43	@ 0x2b
 8000b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ba4:	d015      	beq.n	8000bd2 <_svfiprintf_r+0xfa>
 8000ba6:	9a07      	ldr	r2, [sp, #28]
 8000ba8:	4654      	mov	r4, sl
 8000baa:	2000      	movs	r0, #0
 8000bac:	f04f 0c0a 	mov.w	ip, #10
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bb6:	3b30      	subs	r3, #48	@ 0x30
 8000bb8:	2b09      	cmp	r3, #9
 8000bba:	d94b      	bls.n	8000c54 <_svfiprintf_r+0x17c>
 8000bbc:	b1b0      	cbz	r0, 8000bec <_svfiprintf_r+0x114>
 8000bbe:	9207      	str	r2, [sp, #28]
 8000bc0:	e014      	b.n	8000bec <_svfiprintf_r+0x114>
 8000bc2:	eba0 0308 	sub.w	r3, r0, r8
 8000bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	9304      	str	r3, [sp, #16]
 8000bce:	46a2      	mov	sl, r4
 8000bd0:	e7d2      	b.n	8000b78 <_svfiprintf_r+0xa0>
 8000bd2:	9b03      	ldr	r3, [sp, #12]
 8000bd4:	1d19      	adds	r1, r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	9103      	str	r1, [sp, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bfbb      	ittet	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	f042 0202 	orrlt.w	r2, r2, #2
 8000be4:	9307      	strge	r3, [sp, #28]
 8000be6:	9307      	strlt	r3, [sp, #28]
 8000be8:	bfb8      	it	lt
 8000bea:	9204      	strlt	r2, [sp, #16]
 8000bec:	7823      	ldrb	r3, [r4, #0]
 8000bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bf0:	d10a      	bne.n	8000c08 <_svfiprintf_r+0x130>
 8000bf2:	7863      	ldrb	r3, [r4, #1]
 8000bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bf6:	d132      	bne.n	8000c5e <_svfiprintf_r+0x186>
 8000bf8:	9b03      	ldr	r3, [sp, #12]
 8000bfa:	1d1a      	adds	r2, r3, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	9203      	str	r2, [sp, #12]
 8000c00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c04:	3402      	adds	r4, #2
 8000c06:	9305      	str	r3, [sp, #20]
 8000c08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000ccc <_svfiprintf_r+0x1f4>
 8000c0c:	7821      	ldrb	r1, [r4, #0]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4650      	mov	r0, sl
 8000c12:	f7ff faed 	bl	80001f0 <memchr>
 8000c16:	b138      	cbz	r0, 8000c28 <_svfiprintf_r+0x150>
 8000c18:	9b04      	ldr	r3, [sp, #16]
 8000c1a:	eba0 000a 	sub.w	r0, r0, sl
 8000c1e:	2240      	movs	r2, #64	@ 0x40
 8000c20:	4082      	lsls	r2, r0
 8000c22:	4313      	orrs	r3, r2
 8000c24:	3401      	adds	r4, #1
 8000c26:	9304      	str	r3, [sp, #16]
 8000c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c2c:	4824      	ldr	r0, [pc, #144]	@ (8000cc0 <_svfiprintf_r+0x1e8>)
 8000c2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c32:	2206      	movs	r2, #6
 8000c34:	f7ff fadc 	bl	80001f0 <memchr>
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	d036      	beq.n	8000caa <_svfiprintf_r+0x1d2>
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <_svfiprintf_r+0x1ec>)
 8000c3e:	bb1b      	cbnz	r3, 8000c88 <_svfiprintf_r+0x1b0>
 8000c40:	9b03      	ldr	r3, [sp, #12]
 8000c42:	3307      	adds	r3, #7
 8000c44:	f023 0307 	bic.w	r3, r3, #7
 8000c48:	3308      	adds	r3, #8
 8000c4a:	9303      	str	r3, [sp, #12]
 8000c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c4e:	4433      	add	r3, r6
 8000c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c52:	e76a      	b.n	8000b2a <_svfiprintf_r+0x52>
 8000c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c58:	460c      	mov	r4, r1
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	e7a8      	b.n	8000bb0 <_svfiprintf_r+0xd8>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	3401      	adds	r4, #1
 8000c62:	9305      	str	r3, [sp, #20]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 0c0a 	mov.w	ip, #10
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c70:	3a30      	subs	r2, #48	@ 0x30
 8000c72:	2a09      	cmp	r2, #9
 8000c74:	d903      	bls.n	8000c7e <_svfiprintf_r+0x1a6>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d0c6      	beq.n	8000c08 <_svfiprintf_r+0x130>
 8000c7a:	9105      	str	r1, [sp, #20]
 8000c7c:	e7c4      	b.n	8000c08 <_svfiprintf_r+0x130>
 8000c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c82:	4604      	mov	r4, r0
 8000c84:	2301      	movs	r3, #1
 8000c86:	e7f0      	b.n	8000c6a <_svfiprintf_r+0x192>
 8000c88:	ab03      	add	r3, sp, #12
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	462a      	mov	r2, r5
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <_svfiprintf_r+0x1f0>)
 8000c90:	a904      	add	r1, sp, #16
 8000c92:	4638      	mov	r0, r7
 8000c94:	f3af 8000 	nop.w
 8000c98:	1c42      	adds	r2, r0, #1
 8000c9a:	4606      	mov	r6, r0
 8000c9c:	d1d6      	bne.n	8000c4c <_svfiprintf_r+0x174>
 8000c9e:	89ab      	ldrh	r3, [r5, #12]
 8000ca0:	065b      	lsls	r3, r3, #25
 8000ca2:	f53f af2d 	bmi.w	8000b00 <_svfiprintf_r+0x28>
 8000ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ca8:	e72c      	b.n	8000b04 <_svfiprintf_r+0x2c>
 8000caa:	ab03      	add	r3, sp, #12
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	462a      	mov	r2, r5
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <_svfiprintf_r+0x1f0>)
 8000cb2:	a904      	add	r1, sp, #16
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	f000 f879 	bl	8000dac <_printf_i>
 8000cba:	e7ed      	b.n	8000c98 <_svfiprintf_r+0x1c0>
 8000cbc:	08001111 	.word	0x08001111
 8000cc0:	0800111b 	.word	0x0800111b
 8000cc4:	00000000 	.word	0x00000000
 8000cc8:	08000a21 	.word	0x08000a21
 8000ccc:	08001117 	.word	0x08001117

08000cd0 <_printf_common>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	4616      	mov	r6, r2
 8000cd6:	4698      	mov	r8, r3
 8000cd8:	688a      	ldr	r2, [r1, #8]
 8000cda:	690b      	ldr	r3, [r1, #16]
 8000cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	bfb8      	it	lt
 8000ce4:	4613      	movlt	r3, r2
 8000ce6:	6033      	str	r3, [r6, #0]
 8000ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cec:	4607      	mov	r7, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	b10a      	cbz	r2, 8000cf6 <_printf_common+0x26>
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	6033      	str	r3, [r6, #0]
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	0699      	lsls	r1, r3, #26
 8000cfa:	bf42      	ittt	mi
 8000cfc:	6833      	ldrmi	r3, [r6, #0]
 8000cfe:	3302      	addmi	r3, #2
 8000d00:	6033      	strmi	r3, [r6, #0]
 8000d02:	6825      	ldr	r5, [r4, #0]
 8000d04:	f015 0506 	ands.w	r5, r5, #6
 8000d08:	d106      	bne.n	8000d18 <_printf_common+0x48>
 8000d0a:	f104 0a19 	add.w	sl, r4, #25
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	6832      	ldr	r2, [r6, #0]
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	dc26      	bgt.n	8000d66 <_printf_common+0x96>
 8000d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d1c:	6822      	ldr	r2, [r4, #0]
 8000d1e:	3b00      	subs	r3, #0
 8000d20:	bf18      	it	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	0692      	lsls	r2, r2, #26
 8000d26:	d42b      	bmi.n	8000d80 <_printf_common+0xb0>
 8000d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d2c:	4641      	mov	r1, r8
 8000d2e:	4638      	mov	r0, r7
 8000d30:	47c8      	blx	r9
 8000d32:	3001      	adds	r0, #1
 8000d34:	d01e      	beq.n	8000d74 <_printf_common+0xa4>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	6922      	ldr	r2, [r4, #16]
 8000d3a:	f003 0306 	and.w	r3, r3, #6
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf02      	ittt	eq
 8000d42:	68e5      	ldreq	r5, [r4, #12]
 8000d44:	6833      	ldreq	r3, [r6, #0]
 8000d46:	1aed      	subeq	r5, r5, r3
 8000d48:	68a3      	ldr	r3, [r4, #8]
 8000d4a:	bf0c      	ite	eq
 8000d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d50:	2500      	movne	r5, #0
 8000d52:	4293      	cmp	r3, r2
 8000d54:	bfc4      	itt	gt
 8000d56:	1a9b      	subgt	r3, r3, r2
 8000d58:	18ed      	addgt	r5, r5, r3
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	341a      	adds	r4, #26
 8000d5e:	42b5      	cmp	r5, r6
 8000d60:	d11a      	bne.n	8000d98 <_printf_common+0xc8>
 8000d62:	2000      	movs	r0, #0
 8000d64:	e008      	b.n	8000d78 <_printf_common+0xa8>
 8000d66:	2301      	movs	r3, #1
 8000d68:	4652      	mov	r2, sl
 8000d6a:	4641      	mov	r1, r8
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	47c8      	blx	r9
 8000d70:	3001      	adds	r0, #1
 8000d72:	d103      	bne.n	8000d7c <_printf_common+0xac>
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	3501      	adds	r5, #1
 8000d7e:	e7c6      	b.n	8000d0e <_printf_common+0x3e>
 8000d80:	18e1      	adds	r1, r4, r3
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	2030      	movs	r0, #48	@ 0x30
 8000d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d8a:	4422      	add	r2, r4
 8000d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d94:	3302      	adds	r3, #2
 8000d96:	e7c7      	b.n	8000d28 <_printf_common+0x58>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4638      	mov	r0, r7
 8000da0:	47c8      	blx	r9
 8000da2:	3001      	adds	r0, #1
 8000da4:	d0e6      	beq.n	8000d74 <_printf_common+0xa4>
 8000da6:	3601      	adds	r6, #1
 8000da8:	e7d9      	b.n	8000d5e <_printf_common+0x8e>
	...

08000dac <_printf_i>:
 8000dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	7e0f      	ldrb	r7, [r1, #24]
 8000db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000db4:	2f78      	cmp	r7, #120	@ 0x78
 8000db6:	4691      	mov	r9, r2
 8000db8:	4680      	mov	r8, r0
 8000dba:	460c      	mov	r4, r1
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dc2:	d807      	bhi.n	8000dd4 <_printf_i+0x28>
 8000dc4:	2f62      	cmp	r7, #98	@ 0x62
 8000dc6:	d80a      	bhi.n	8000dde <_printf_i+0x32>
 8000dc8:	2f00      	cmp	r7, #0
 8000dca:	f000 80d1 	beq.w	8000f70 <_printf_i+0x1c4>
 8000dce:	2f58      	cmp	r7, #88	@ 0x58
 8000dd0:	f000 80b8 	beq.w	8000f44 <_printf_i+0x198>
 8000dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ddc:	e03a      	b.n	8000e54 <_printf_i+0xa8>
 8000dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000de2:	2b15      	cmp	r3, #21
 8000de4:	d8f6      	bhi.n	8000dd4 <_printf_i+0x28>
 8000de6:	a101      	add	r1, pc, #4	@ (adr r1, 8000dec <_printf_i+0x40>)
 8000de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dec:	08000e45 	.word	0x08000e45
 8000df0:	08000e59 	.word	0x08000e59
 8000df4:	08000dd5 	.word	0x08000dd5
 8000df8:	08000dd5 	.word	0x08000dd5
 8000dfc:	08000dd5 	.word	0x08000dd5
 8000e00:	08000dd5 	.word	0x08000dd5
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000dd5 	.word	0x08000dd5
 8000e0c:	08000dd5 	.word	0x08000dd5
 8000e10:	08000dd5 	.word	0x08000dd5
 8000e14:	08000dd5 	.word	0x08000dd5
 8000e18:	08000f57 	.word	0x08000f57
 8000e1c:	08000e83 	.word	0x08000e83
 8000e20:	08000f11 	.word	0x08000f11
 8000e24:	08000dd5 	.word	0x08000dd5
 8000e28:	08000dd5 	.word	0x08000dd5
 8000e2c:	08000f79 	.word	0x08000f79
 8000e30:	08000dd5 	.word	0x08000dd5
 8000e34:	08000e83 	.word	0x08000e83
 8000e38:	08000dd5 	.word	0x08000dd5
 8000e3c:	08000dd5 	.word	0x08000dd5
 8000e40:	08000f19 	.word	0x08000f19
 8000e44:	6833      	ldr	r3, [r6, #0]
 8000e46:	1d1a      	adds	r2, r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6032      	str	r2, [r6, #0]
 8000e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e54:	2301      	movs	r3, #1
 8000e56:	e09c      	b.n	8000f92 <_printf_i+0x1e6>
 8000e58:	6833      	ldr	r3, [r6, #0]
 8000e5a:	6820      	ldr	r0, [r4, #0]
 8000e5c:	1d19      	adds	r1, r3, #4
 8000e5e:	6031      	str	r1, [r6, #0]
 8000e60:	0606      	lsls	r6, r0, #24
 8000e62:	d501      	bpl.n	8000e68 <_printf_i+0xbc>
 8000e64:	681d      	ldr	r5, [r3, #0]
 8000e66:	e003      	b.n	8000e70 <_printf_i+0xc4>
 8000e68:	0645      	lsls	r5, r0, #25
 8000e6a:	d5fb      	bpl.n	8000e64 <_printf_i+0xb8>
 8000e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e70:	2d00      	cmp	r5, #0
 8000e72:	da03      	bge.n	8000e7c <_printf_i+0xd0>
 8000e74:	232d      	movs	r3, #45	@ 0x2d
 8000e76:	426d      	negs	r5, r5
 8000e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e7c:	4858      	ldr	r0, [pc, #352]	@ (8000fe0 <_printf_i+0x234>)
 8000e7e:	230a      	movs	r3, #10
 8000e80:	e011      	b.n	8000ea6 <_printf_i+0xfa>
 8000e82:	6821      	ldr	r1, [r4, #0]
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	0608      	lsls	r0, r1, #24
 8000e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e8c:	d402      	bmi.n	8000e94 <_printf_i+0xe8>
 8000e8e:	0649      	lsls	r1, r1, #25
 8000e90:	bf48      	it	mi
 8000e92:	b2ad      	uxthmi	r5, r5
 8000e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e96:	4852      	ldr	r0, [pc, #328]	@ (8000fe0 <_printf_i+0x234>)
 8000e98:	6033      	str	r3, [r6, #0]
 8000e9a:	bf14      	ite	ne
 8000e9c:	230a      	movne	r3, #10
 8000e9e:	2308      	moveq	r3, #8
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ea6:	6866      	ldr	r6, [r4, #4]
 8000ea8:	60a6      	str	r6, [r4, #8]
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	db05      	blt.n	8000eba <_printf_i+0x10e>
 8000eae:	6821      	ldr	r1, [r4, #0]
 8000eb0:	432e      	orrs	r6, r5
 8000eb2:	f021 0104 	bic.w	r1, r1, #4
 8000eb6:	6021      	str	r1, [r4, #0]
 8000eb8:	d04b      	beq.n	8000f52 <_printf_i+0x1a6>
 8000eba:	4616      	mov	r6, r2
 8000ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8000ec4:	5dc7      	ldrb	r7, [r0, r7]
 8000ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000eca:	462f      	mov	r7, r5
 8000ecc:	42bb      	cmp	r3, r7
 8000ece:	460d      	mov	r5, r1
 8000ed0:	d9f4      	bls.n	8000ebc <_printf_i+0x110>
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d10b      	bne.n	8000eee <_printf_i+0x142>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	07df      	lsls	r7, r3, #31
 8000eda:	d508      	bpl.n	8000eee <_printf_i+0x142>
 8000edc:	6923      	ldr	r3, [r4, #16]
 8000ede:	6861      	ldr	r1, [r4, #4]
 8000ee0:	4299      	cmp	r1, r3
 8000ee2:	bfde      	ittt	le
 8000ee4:	2330      	movle	r3, #48	@ 0x30
 8000ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000eee:	1b92      	subs	r2, r2, r6
 8000ef0:	6122      	str	r2, [r4, #16]
 8000ef2:	f8cd a000 	str.w	sl, [sp]
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	aa03      	add	r2, sp, #12
 8000efa:	4621      	mov	r1, r4
 8000efc:	4640      	mov	r0, r8
 8000efe:	f7ff fee7 	bl	8000cd0 <_printf_common>
 8000f02:	3001      	adds	r0, #1
 8000f04:	d14a      	bne.n	8000f9c <_printf_i+0x1f0>
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0a:	b004      	add	sp, #16
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	4832      	ldr	r0, [pc, #200]	@ (8000fe4 <_printf_i+0x238>)
 8000f1a:	2778      	movs	r7, #120	@ 0x78
 8000f1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	6831      	ldr	r1, [r6, #0]
 8000f24:	061f      	lsls	r7, r3, #24
 8000f26:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f2a:	d402      	bmi.n	8000f32 <_printf_i+0x186>
 8000f2c:	065f      	lsls	r7, r3, #25
 8000f2e:	bf48      	it	mi
 8000f30:	b2ad      	uxthmi	r5, r5
 8000f32:	6031      	str	r1, [r6, #0]
 8000f34:	07d9      	lsls	r1, r3, #31
 8000f36:	bf44      	itt	mi
 8000f38:	f043 0320 	orrmi.w	r3, r3, #32
 8000f3c:	6023      	strmi	r3, [r4, #0]
 8000f3e:	b11d      	cbz	r5, 8000f48 <_printf_i+0x19c>
 8000f40:	2310      	movs	r3, #16
 8000f42:	e7ad      	b.n	8000ea0 <_printf_i+0xf4>
 8000f44:	4826      	ldr	r0, [pc, #152]	@ (8000fe0 <_printf_i+0x234>)
 8000f46:	e7e9      	b.n	8000f1c <_printf_i+0x170>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	f023 0320 	bic.w	r3, r3, #32
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	e7f6      	b.n	8000f40 <_printf_i+0x194>
 8000f52:	4616      	mov	r6, r2
 8000f54:	e7bd      	b.n	8000ed2 <_printf_i+0x126>
 8000f56:	6833      	ldr	r3, [r6, #0]
 8000f58:	6825      	ldr	r5, [r4, #0]
 8000f5a:	6961      	ldr	r1, [r4, #20]
 8000f5c:	1d18      	adds	r0, r3, #4
 8000f5e:	6030      	str	r0, [r6, #0]
 8000f60:	062e      	lsls	r6, r5, #24
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	d501      	bpl.n	8000f6a <_printf_i+0x1be>
 8000f66:	6019      	str	r1, [r3, #0]
 8000f68:	e002      	b.n	8000f70 <_printf_i+0x1c4>
 8000f6a:	0668      	lsls	r0, r5, #25
 8000f6c:	d5fb      	bpl.n	8000f66 <_printf_i+0x1ba>
 8000f6e:	8019      	strh	r1, [r3, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	6123      	str	r3, [r4, #16]
 8000f74:	4616      	mov	r6, r2
 8000f76:	e7bc      	b.n	8000ef2 <_printf_i+0x146>
 8000f78:	6833      	ldr	r3, [r6, #0]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	6032      	str	r2, [r6, #0]
 8000f7e:	681e      	ldr	r6, [r3, #0]
 8000f80:	6862      	ldr	r2, [r4, #4]
 8000f82:	2100      	movs	r1, #0
 8000f84:	4630      	mov	r0, r6
 8000f86:	f7ff f933 	bl	80001f0 <memchr>
 8000f8a:	b108      	cbz	r0, 8000f90 <_printf_i+0x1e4>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	6060      	str	r0, [r4, #4]
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	6123      	str	r3, [r4, #16]
 8000f94:	2300      	movs	r3, #0
 8000f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f9a:	e7aa      	b.n	8000ef2 <_printf_i+0x146>
 8000f9c:	6923      	ldr	r3, [r4, #16]
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	47d0      	blx	sl
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d0ad      	beq.n	8000f06 <_printf_i+0x15a>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	079b      	lsls	r3, r3, #30
 8000fae:	d413      	bmi.n	8000fd8 <_printf_i+0x22c>
 8000fb0:	68e0      	ldr	r0, [r4, #12]
 8000fb2:	9b03      	ldr	r3, [sp, #12]
 8000fb4:	4298      	cmp	r0, r3
 8000fb6:	bfb8      	it	lt
 8000fb8:	4618      	movlt	r0, r3
 8000fba:	e7a6      	b.n	8000f0a <_printf_i+0x15e>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4632      	mov	r2, r6
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	4640      	mov	r0, r8
 8000fc4:	47d0      	blx	sl
 8000fc6:	3001      	adds	r0, #1
 8000fc8:	d09d      	beq.n	8000f06 <_printf_i+0x15a>
 8000fca:	3501      	adds	r5, #1
 8000fcc:	68e3      	ldr	r3, [r4, #12]
 8000fce:	9903      	ldr	r1, [sp, #12]
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	42ab      	cmp	r3, r5
 8000fd4:	dcf2      	bgt.n	8000fbc <_printf_i+0x210>
 8000fd6:	e7eb      	b.n	8000fb0 <_printf_i+0x204>
 8000fd8:	2500      	movs	r5, #0
 8000fda:	f104 0619 	add.w	r6, r4, #25
 8000fde:	e7f5      	b.n	8000fcc <_printf_i+0x220>
 8000fe0:	08001122 	.word	0x08001122
 8000fe4:	08001133 	.word	0x08001133

08000fe8 <memmove>:
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	b510      	push	{r4, lr}
 8000fec:	eb01 0402 	add.w	r4, r1, r2
 8000ff0:	d902      	bls.n	8000ff8 <memmove+0x10>
 8000ff2:	4284      	cmp	r4, r0
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	d807      	bhi.n	8001008 <memmove+0x20>
 8000ff8:	1e43      	subs	r3, r0, #1
 8000ffa:	42a1      	cmp	r1, r4
 8000ffc:	d008      	beq.n	8001010 <memmove+0x28>
 8000ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001006:	e7f8      	b.n	8000ffa <memmove+0x12>
 8001008:	4402      	add	r2, r0
 800100a:	4601      	mov	r1, r0
 800100c:	428a      	cmp	r2, r1
 800100e:	d100      	bne.n	8001012 <memmove+0x2a>
 8001010:	bd10      	pop	{r4, pc}
 8001012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800101a:	e7f7      	b.n	800100c <memmove+0x24>

0800101c <_sbrk_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d06      	ldr	r5, [pc, #24]	@ (8001038 <_sbrk_r+0x1c>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff f97c 	bl	8000324 <_sbrk>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_sbrk_r+0x1a>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_sbrk_r+0x1a>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	20000228 	.word	0x20000228

0800103c <memcpy>:
 800103c:	440a      	add	r2, r1
 800103e:	4291      	cmp	r1, r2
 8001040:	f100 33ff 	add.w	r3, r0, #4294967295
 8001044:	d100      	bne.n	8001048 <memcpy+0xc>
 8001046:	4770      	bx	lr
 8001048:	b510      	push	{r4, lr}
 800104a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800104e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001052:	4291      	cmp	r1, r2
 8001054:	d1f9      	bne.n	800104a <memcpy+0xe>
 8001056:	bd10      	pop	{r4, pc}

08001058 <_realloc_r>:
 8001058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800105c:	4607      	mov	r7, r0
 800105e:	4614      	mov	r4, r2
 8001060:	460d      	mov	r5, r1
 8001062:	b921      	cbnz	r1, 800106e <_realloc_r+0x16>
 8001064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001068:	4611      	mov	r1, r2
 800106a:	f7ff bc4d 	b.w	8000908 <_malloc_r>
 800106e:	b92a      	cbnz	r2, 800107c <_realloc_r+0x24>
 8001070:	f7ff fbde 	bl	8000830 <_free_r>
 8001074:	4625      	mov	r5, r4
 8001076:	4628      	mov	r0, r5
 8001078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800107c:	f000 f81a 	bl	80010b4 <_malloc_usable_size_r>
 8001080:	4284      	cmp	r4, r0
 8001082:	4606      	mov	r6, r0
 8001084:	d802      	bhi.n	800108c <_realloc_r+0x34>
 8001086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800108a:	d8f4      	bhi.n	8001076 <_realloc_r+0x1e>
 800108c:	4621      	mov	r1, r4
 800108e:	4638      	mov	r0, r7
 8001090:	f7ff fc3a 	bl	8000908 <_malloc_r>
 8001094:	4680      	mov	r8, r0
 8001096:	b908      	cbnz	r0, 800109c <_realloc_r+0x44>
 8001098:	4645      	mov	r5, r8
 800109a:	e7ec      	b.n	8001076 <_realloc_r+0x1e>
 800109c:	42b4      	cmp	r4, r6
 800109e:	4622      	mov	r2, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	bf28      	it	cs
 80010a4:	4632      	movcs	r2, r6
 80010a6:	f7ff ffc9 	bl	800103c <memcpy>
 80010aa:	4629      	mov	r1, r5
 80010ac:	4638      	mov	r0, r7
 80010ae:	f7ff fbbf 	bl	8000830 <_free_r>
 80010b2:	e7f1      	b.n	8001098 <_realloc_r+0x40>

080010b4 <_malloc_usable_size_r>:
 80010b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010b8:	1f18      	subs	r0, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bfbc      	itt	lt
 80010be:	580b      	ldrlt	r3, [r1, r0]
 80010c0:	18c0      	addlt	r0, r0, r3
 80010c2:	4770      	bx	lr

080010c4 <_init>:
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c6:	bf00      	nop
 80010c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010ca:	bc08      	pop	{r3}
 80010cc:	469e      	mov	lr, r3
 80010ce:	4770      	bx	lr

080010d0 <_fini>:
 80010d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d2:	bf00      	nop
 80010d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d6:	bc08      	pop	{r3}
 80010d8:	469e      	mov	lr, r3
 80010da:	4770      	bx	lr
